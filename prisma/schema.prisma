datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  name      String?
  password  String
  roles     Role[]      @relation("UserRoles")
  projects  Project[]   @relation("ProjectUsers")
  tasks     Task[]      @relation("TaskAssignees")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  UserRole  UserRole[]
  Comment   Comment[]
  ChangeLog ChangeLog[]
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  users          User[]           @relation("UserRoles")
  permissions    Permission[]     @relation("RolePermissions")
  UserRole       UserRole[]
  RolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  roles          Role[]           @relation("RolePermissions")
  RolePermission RolePermission[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  users       User[]   @relation("ProjectUsers")
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  File        File[]
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  assignees   User[]     @relation("TaskAssignees")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comment     Comment[]
  File        File[]
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
}

model File {
  id        String   @id @default(uuid())
  url       String
  taskId    String?
  projectId String?
  task      Task?    @relation(fields: [taskId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

model ChangeLog {
  id         String   @id @default(uuid())
  action     String
  entityId   String
  entityType String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}
